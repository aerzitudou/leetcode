/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
public class Solution {
      public int maxPoints(Point[] points) {
 
	 int n= points.length;
			int res = 0;
			
			if (n < 3)  //for the case of 2 or 1 point
				return n;
			else {
				for (int i = 0; i <= n - 2; i++) {
					int verti = 0;
					int overlap=0;
					HashMap<Double, Integer> slNum = new HashMap<Double, Integer>();
					for (int j = i + 1; j <= n - 1; j++) { // calculate slope
						
						if (points[j].x != points[i].x) {
							double k =1.000* (points[j].y - points[i].y)
									/ (points[j].x - points[i].x);
									if (k == 0.0) k = 0.0;
							// slope value of line formed by i and j
							if (slNum.containsKey(k)) {
								int value = slNum.get(k);// get value (number of
															// times k occurs)
															// correspoing with
															// current slope

								value++;
								slNum.put(k, value);// put new value back to
													// hashTable
				
							} else {
								slNum.put(k, 1);
							}
						}
						else {
							if(points[j].y == points[i].y){
							
							overlap++;
							}
							else{
							verti++;	
							}
						}
					}
				   if(overlap+verti+1>res){
					res=overlap+verti+1;
					}
				
					for(Integer a:slNum.values()){
						int temp=overlap+a+1;
						if(temp>res)
							res=temp;
					
					}				
				}
			}
		 
			return res ;    
       
	
       
        
    }
}
